package org.torusresearch.fetchnodedetails;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.torusresearch.fetchnodedetails.types.EpochInfo;
import org.torusresearch.fetchnodedetails.types.NodeDetails;
import org.torusresearch.fetchnodedetails.types.NodeInfo;

import java.math.BigInteger;
import java.util.concurrent.ExecutionException;

import static org.junit.jupiter.api.Assertions.assertEquals;

class FetchNodeDetailsTest {
    private static final String EPOCH_18_INFO = "EpochInfo{id='18', n='9', k='5', t='2', nodeList=[0x40e8f0d606281b0a1d9d8ac9030aaae9d51229d1, 0x1c1895be5c0951da5b3663f5820e23ee74d99f87, 0x8dfa7764a9fdffff1305fac1ee2dfc1513602c30, 0x31bdf7cfc8d70bed513e27ba9e96d94635065b03, 0xf3d1ce44e2399c931d705872c83a020693711e0a, 0x014fa226e56f5df33aed56d62882eb1db9052047, 0x45a0ffdd0d2d853e7f25e3c51567e9803dbacaa3, 0xf2fa106065fa4131f71988d2c24caa235c399bc8, 0x73f1fd7b5e0501ad1e79353c73b1692d4b4b8a6c], prevEpoch='17', nextEpoch='19'}";
    private static final String FIRST_NODE_INFO = "NodeInfo{declaredIp='torus-18.torusnode.com:443', position='1', pubKx='107082045066154177533035871355946698712954231105108535436156312542445529617311', pubKy='7802569006311477184046316707044727380159877195819365265998918811766766480847', tmP2PListenAddress='', p2pListenAddress=''}";
    private static final String NODE_DETAILS = "NodeDetails{currentEpoch='18', nodeListAddress='0x638646503746d5456209e33a2ff5e3226d698bea', torusNodeEndpoints=[https://torus-18.torusnode.com/jrpc, https://torus.ont.io/jrpc, https://torus.binancex.dev/jrpc, https://torus.matic.network/jrpc, https://torusnode.zilliqa.network/jrpc, https://torus.ens.domains/jrpc, https://torus-node.skalelabs.com/jrpc, https://torus.cosmos.network/jrpc, https://torus.etherscan.com/jrpc], torusIndexes=[1, 2, 3, 4, 5, 6, 7, 8, 9], torusNodePub=[TorusNodePub{X='313037303832303435303636313534313737353333303335383731333535393436363938373132393534323331313035313038353335343336313536333132353432343435353239363137333131', Y='37383032353639303036333131343737313834303436333136373037303434373237333830313539383737313935383139333635323635393938393138383131373636373636343830383437'}, TorusNodePub{X='3837363639343030393135393537333535393537333434303932383636333730343634373430393131353536353433393439323231333933323636323633323839353835313832393139373233', Y='3136353338383139373238303635373639343637383738363332373330313735383933393533353635393639373230363731363533363039323330333734383735343831323836363837383537'}, TorusNodePub{X='3735343635393931313731373531383636333636303737373537313833333034313333333833303132373132343631313338393536303835313839333835393434313632323137373232333531', Y='313130363737373939323633353130343439343030373239323535313935353530323232393539393137393639373735363937303038353536303634323237383736313638303830393936313334'}, TorusNodePub{X='33343234363130343436333134303637313936353330373130373537393432313639323432333839323032353737393633303734353739303737383133313731373434383031333836343237', Y='3336393133363638323835303032373438353837373133323339373336333832393332303039323635303230373339373738353537373037363238373635343133373734363932363333303630'}, TorusNodePub{X='3136363031323037363734313738393339323233353838363230373138313531303538393630313638333239373835333633323234333838383433363239323031383333363933333030363930', Y='37303639383036333733313034383038373233323939393039383838383035303839303532333039333737323731333839313630393635303735333839333835313530333439393734343534'}, TorusNodePub{X='3732363037303430333739393934393535353630383732343336333835323934303030353932383930373739373039373735383239333834353737333632373337313933303932383336373038', Y='36343838393239363230363633363933313730313936393338363639333533323631303432393738383233363830313231383636353437313831373839333936353131333635353635323037'}, TorusNodePub{X='3130373234323636343837383232313939313935363335313434383833333337313034303232323637353331303832383836353031333439303334393538313331353934303939373836393231', Y='313039323436363433353634343932373338383535303134303735313430393832363535353833373536393539333633343739333830393732323638313235343134373039363237363830313636'}, TorusNodePub{X='3332333737383939393933323235353832323939383932303936363632373039333730373135353832313036313533333135343637383337393639353334333439303438383038363138343636', Y='33363238333033303134333133333138333537353135353633303830373139383331353034323634313530363635363733303837353635383631313434343537303035333135303531333635'}, TorusNodePub{X='313033363835393431323137303032383230323735383138393039353730323436313737343839393135333936343537383031323532373134313435303632383139313931333433383435343936', Y='3635383930383330393836333931343334343030303534353633383233383536343237303335303730363334313337333638373030323134383738313138353139343431333030313532333839'}], updated=true}";

    FetchNodeDetails fetchNodeDetails;
    BigInteger currentEpoch = new BigInteger("18");

    @BeforeEach
    public void setup() {
        System.out.println("Setup Starting");
        fetchNodeDetails = new FetchNodeDetails();
    }

    @DisplayName("Gets Current Epoch Correctly")
    @Test
    public void shouldGetCurrentEpoch() throws ExecutionException, InterruptedException {
        BigInteger epoch = this.fetchNodeDetails.getCurrentEpoch().get();
        assertEquals(epoch, this.currentEpoch);
    }

    @DisplayName("Gets the Epoch Info")
    @Test
    public void shouldGetEpochInfo() throws ExecutionException, InterruptedException {
        EpochInfo epochInfo = this.fetchNodeDetails.getEpochInfo(this.currentEpoch).get();
        assertEquals(epochInfo.toString(), EPOCH_18_INFO);
    }

    @DisplayName("Gets the First Node Endpoint")
    @Test
    public void shouldGetNodeEndpoint() throws ExecutionException, InterruptedException {
        EpochInfo epochInfo = this.fetchNodeDetails.getEpochInfo(this.currentEpoch).get();
        NodeInfo nodeInfo = this.fetchNodeDetails.getNodeEndpoint(epochInfo.getNodeList()[0]).get();
        assertEquals(nodeInfo.toString(), FIRST_NODE_INFO);
    }

    @DisplayName("Gets the Node details")
    @Test
    public void shouldGetNodeDetails() throws ExecutionException, InterruptedException {
        NodeDetails nodeDetails = this.fetchNodeDetails.getNodeDetails().get();
        assertEquals(nodeDetails.toString(), NODE_DETAILS);
    }

}